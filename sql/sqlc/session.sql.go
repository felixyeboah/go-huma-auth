// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: session.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
    access_token,
    refresh_token,
    user_id,
    expiry_date,
    user_agent,
    ip_address,
    last_accessed_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, access_token, refresh_token, user_id, expiry_date, user_agent, ip_address, last_accessed_at, created_at, updated_at
`

type CreateSessionParams struct {
	AccessToken    string         `json:"access_token"`
	RefreshToken   string         `json:"refresh_token"`
	UserID         uuid.UUID      `json:"user_id"`
	ExpiryDate     time.Time      `json:"expiry_date"`
	UserAgent      sql.NullString `json:"user_agent"`
	IpAddress      sql.NullString `json:"ip_address"`
	LastAccessedAt sql.NullTime   `json:"last_accessed_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.AccessToken,
		arg.RefreshToken,
		arg.UserID,
		arg.ExpiryDate,
		arg.UserAgent,
		arg.IpAddress,
		arg.LastAccessedAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.UserID,
		&i.ExpiryDate,
		&i.UserAgent,
		&i.IpAddress,
		&i.LastAccessedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
