// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(
    name,
    email,
    phone_number,
    password,
    role_id
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, name, email, avatar, phone_number, password, is_verified, role_id, created_at, updated_at
`

type CreateUserParams struct {
	Name        string    `json:"name"`
	Email       string    `json:"email"`
	PhoneNumber string    `json:"phone_number"`
	Password    string    `json:"password"`
	RoleID      uuid.UUID `json:"role_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.PhoneNumber,
		arg.Password,
		arg.RoleID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Avatar,
		&i.PhoneNumber,
		&i.Password,
		&i.IsVerified,
		&i.RoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, avatar, phone_number, password, is_verified, role_id, created_at, updated_at from users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Avatar,
		&i.PhoneNumber,
		&i.Password,
		&i.IsVerified,
		&i.RoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const verifyUser = `-- name: VerifyUser :exec
UPDATE users
SET is_verified = true
WHERE id = $1
`

func (q *Queries) VerifyUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, verifyUser, id)
	return err
}
